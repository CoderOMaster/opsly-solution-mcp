# pip install google-generativeai mcp
import asyncio
import os
# Add json import for formatting output
import json
import copy

from datetime import datetime
from google import genai
from google.genai import types
from mcp import ClientSession, StdioServerParameters
from mcp.client.stdio import stdio_client
from dotenv import load_dotenv
load_dotenv()

api_key = os.getenv("GEMINI_API_KEY")
if not api_key:
    raise ValueError("GEMINI_API_KEY environment variable is not set. Please set it with your Google AI API key.")

client = genai.Client(api_key=api_key)

# Re-add StdioServerParameters, setting args for stdio
server_params = StdioServerParameters(
    command="npx",
    args=[
        "-y",
        "@modelcontextprotocol/server-github"
    ],
    env={"GITHUB_PERSONAL_ACCESS_TOKEN": os.getenv("GITHUB_PERSONAL_ACCESS_TOKEN")},
)

async def run():
    async with stdio_client(server_params) as (read, write):
        async with ClientSession(read, write) as session:
            prompt = f"create a new repo called MCP-Test-Assignment with Streamlit"
            await session.initialize()

            mcp_tools = await session.list_tools()
            def clean_schema(schema):
                """Recursively rebuilds a schema, excluding unsupported keys."""
                if not isinstance(schema, dict):
                    return schema

                cleaned = {}
                for key, value in schema.items():
                    if key in ["additionalProperties", "$schema"]:
                        continue
                    if isinstance(value, dict):
                        cleaned[key] = clean_schema(value)
                    elif isinstance(value, list):
                        cleaned[key] = [clean_schema(item) for item in value]
                    else:
                        cleaned[key] = value
                return cleaned

            tools = []
            for tool in mcp_tools.tools:
                # Force conversion to a standard dict via JSON to remove any custom object types
                schema_as_dict = json.loads(json.dumps(tool.inputSchema))
                cleaned_input_schema = clean_schema(schema_as_dict)
                
                function_decl = {
                    "name": tool.name,
                    "description": tool.description or "",
                    "parameters": cleaned_input_schema,
                }
                
                tools.append(types.Tool(function_declarations=[function_decl]))

            response = client.models.generate_content(
                model="gemini-2.0-flash",
                contents=prompt,
                config=types.GenerateContentConfig(
                    temperature=0,
                    tools=tools,
                ),
            )

            if response.candidates[0].content.parts[0].function_call:
                function_call = response.candidates[0].content.parts[0].function_call

                result = await session.call_tool(
                    function_call.name, arguments=dict(function_call.args)
                )

                try:
                    flight_data = json.loads(result.content[0].text)
                    print(json.dumps(flight_data, indent=2))
                except json.JSONDecodeError:
                    print("MCP server returned non-JSON response:")
                    print(result.content[0].text)
                except (IndexError, AttributeError):
                     print("Unexpected result structure from MCP server:")
                     print(result)
            else:
                print("No function call was generated by the model.")
                if response.text:
                     print("Model response:")
                     print(response.text)

asyncio.run(run())